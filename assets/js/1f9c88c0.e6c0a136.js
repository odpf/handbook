"use strict";(self.webpackChunkfirehose=self.webpackChunkfirehose||[]).push([[912],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||l;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2204:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return c}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),o=["components"],i={},s="Style Guide",u={unversionedId:"go/style_guide",id:"go/style_guide",title:"Style Guide",description:"We follow following style guide curated by some amazing folks around the world.",source:"@site/docs/go/style_guide.md",sourceDirName:"go",slug:"/go/style_guide",permalink:"/handbook/go/style_guide",draft:!1,editUrl:"https://github.com/odpf/handbook/edit/master/docs/docs/go/style_guide.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Project Structure Guidelines",permalink:"/handbook/go/structure"},next:{title:"Error Handling",permalink:"/handbook/go/error_handling"}},p={},c=[{value:"Naming",id:"naming",level:2},{value:"Case",id:"case",level:3},{value:"Local variables",id:"local-variables",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Return Values",id:"return-values",level:3},{value:"Receivers",id:"receivers",level:3},{value:"Exported package-level names",id:"exported-package-level-names",level:3},{value:"Interface Types",id:"interface-types",level:3},{value:"Errors",id:"errors",level:3},{value:"Packages",id:"packages",level:3},{value:"Import paths",id:"import-paths",level:3},{value:"Table-driven Testing",id:"table-driven-testing",level:2},{value:"Avoid Pointers",id:"avoid-pointers",level:2},{value:"As Receivers",id:"as-receivers",level:3},{value:"As Arguments",id:"as-arguments",level:3},{value:"References",id:"references",level:2}],d={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"style-guide"},"Style Guide"),(0,l.kt)("p",null,"We follow following style guide curated by some amazing folks around the world."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://golang.org/doc/effective_go"},"Effective Go")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/uber-go/guide/blob/master/style.md"},"Uber Go Style Guide"))),(0,l.kt)("h2",{id:"naming"},"Naming"),(0,l.kt)("p",null,"Readability is the defining quality of good code. Good names are critical to readability. Good names Consistent (easy to guess), Short (easy to type), and Accurate (easy to understand)."),(0,l.kt)("h3",{id:"case"},"Case"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Names in Go should use MixedCase."),(0,l.kt)("li",{parentName:"ul"},"Do not use names_with_underscores."),(0,l.kt)("li",{parentName:"ul"},"Acronyms should be all capitals, as in ServeHTTP and IDProcessor.")),(0,l.kt)("h3",{id:"local-variables"},"Local variables"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Long names obscure what the code does. Always, try to keep local variables short.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Common variable/type combinations may use really short names. For example:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Prefer ",(0,l.kt)("inlineCode",{parentName:"li"},"i")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"index"),"."),(0,l.kt)("li",{parentName:"ul"},"Prefer ",(0,l.kt)("inlineCode",{parentName:"li"},"r")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"reader"),"."),(0,l.kt)("li",{parentName:"ul"},"Prefer ",(0,l.kt)("inlineCode",{parentName:"li"},"b")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"buffer"),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Avoid redundant names, given their context:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Prefer count to ",(0,l.kt)("inlineCode",{parentName:"li"},"runeCount")," inside a function named ",(0,l.kt)("inlineCode",{parentName:"li"},"RuneCount"),"."),(0,l.kt)("li",{parentName:"ul"},"Prefer ",(0,l.kt)("inlineCode",{parentName:"li"},"ok")," (or ",(0,l.kt)("inlineCode",{parentName:"li"},"found"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"exists"),") to ",(0,l.kt)("inlineCode",{parentName:"li"},"keyInMap")," in the statement")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"v, ok := m[k]\n")),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)("p",null,"Function parameters are like local variables, but they also serve as documentation."),(0,l.kt)("p",null,"Where the types are descriptive, they should be short:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func AfterFunc(d Duration, f func()) *Timer\n\nfunc Escape(w io.Writer, s []byte)\n")),(0,l.kt)("p",null,"Where the types are more ambiguous, the names may provide documentation:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func Unix(sec, nsec int64) Time\n\nfunc HasPrefix(s, prefix []byte) bool\n")),(0,l.kt)("h3",{id:"return-values"},"Return Values"),(0,l.kt)("p",null,"Return values on exported functions should only be named for documentation purposes."),(0,l.kt)("p",null,"These are good examples of named return values:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func Copy(dst Writer, src Reader) (written int64, err error)\n\nfunc ScanBytes(data []byte, atEOF bool) (advance int, token []byte, err error)\n")),(0,l.kt)("p",null,"When a function returs more than 1 values of same types, use naming:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func AsInts(t time.Time) (sec, nsec int64)\n")),(0,l.kt)("h3",{id:"receivers"},"Receivers"),(0,l.kt)("p",null,"Receivers are a special kind of argument."),(0,l.kt)("p",null,"By convention, they are one or two characters that reflect the receiver type,\nbecause they typically appear on almost every line:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func (b *Buffer) Read(p []byte) (n int, err error)\n\nfunc (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request)\n\nfunc (r Rectangle) Size() Point\n")),(0,l.kt)("p",null,"Receiver names should be consistent across a types' methods.\n(Don't use ",(0,l.kt)("inlineCode",{parentName:"p"},"r")," in one method and ",(0,l.kt)("inlineCode",{parentName:"p"},"rdr")," in another.)"),(0,l.kt)("h3",{id:"exported-package-level-names"},"Exported package-level names"),(0,l.kt)("p",null,"Exported names are qualified by their package names."),(0,l.kt)("p",null,"Remember this when naming exported variables, constants, functions, and types."),(0,l.kt)("p",null,"That's why we have ",(0,l.kt)("inlineCode",{parentName:"p"},"bytes.Buffer")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"strings.Reader"),", not ",(0,l.kt)("inlineCode",{parentName:"p"},"bytes.ByteBuffer")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"strings.StringReader"),"."),(0,l.kt)("h3",{id:"interface-types"},"Interface Types"),(0,l.kt)("p",null,"Interfaces that specify just one method are usually just that function name with 'er' appended to it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"type Reader interface {\n    Read(p []byte) (n int, err error)\n}\n")),(0,l.kt)("p",null,"Sometimes the result isn't correct English, but we do it anyway:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"type Execer interface {\n    Exec(query string, args []Value) (Result, error)\n}\n")),(0,l.kt)("p",null,"Sometimes we use English to make it nicer:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"type ByteReader interface {\n    ReadByte() (c byte, err error)\n}\n")),(0,l.kt)("p",null,"When an interface includes multiple methods, choose a name that accurately describes its purpose (examples: ",(0,l.kt)("inlineCode",{parentName:"p"},"net.Conn"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"http.ResponseWriter"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"io.ReadWriter"),")."),(0,l.kt)("h3",{id:"errors"},"Errors"),(0,l.kt)("p",null,"Error types should be of the form FooError:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"type ExitError struct {\n    ...\n}\n")),(0,l.kt)("p",null,"Error values should be of the form ErrFoo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'var ErrFormat = errors.New("image: unknown format")\n')),(0,l.kt)("h3",{id:"packages"},"Packages"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Choose package names that lend meaning to the names they export."),(0,l.kt)("li",{parentName:"ul"},"Use pakcages that closely match the domain. i.e., Instead of ",(0,l.kt)("inlineCode",{parentName:"li"},"services"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"models"),", etc., use ",(0,l.kt)("inlineCode",{parentName:"li"},"user"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"article"),", etc. This also forces contributors to think of anything they are adding in terms of the domain."),(0,l.kt)("li",{parentName:"ul"},"Steer clear of util, common, and the like - These packages have no clear responsibilitiy defined and eventually become a dumping ground.")),(0,l.kt)("h3",{id:"import-paths"},"Import paths"),(0,l.kt)("p",null,"The last component of a package path should be the same as the package name."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'"compress/gzip" // package gzip\n')),(0,l.kt)("p",null,"Avoid stutter in repository and package paths:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'"code.google.com/p/goauth2/oauth2" // bad;\n')),(0,l.kt)("p",null,"For libraries, it often works to put the package code in the repo root:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'"github.com/golang/oauth2" // package oauth2\n')),(0,l.kt)("p",null,"Also avoid upper case letters (not all file systems are case sensitive)."),(0,l.kt)("h2",{id:"table-driven-testing"},"Table-driven Testing"),(0,l.kt)("p",null,"Table-driven testing makes the tests easy to understand, add new cases, etc."),(0,l.kt)("p",null,"Refer: ",(0,l.kt)("a",{parentName:"p",href:"https://dave.cheney.net/2019/05/07/prefer-table-driven-tests"},"https://dave.cheney.net/2019/05/07/prefer-table-driven-tests")),(0,l.kt)("h2",{id:"avoid-pointers"},"Avoid Pointers"),(0,l.kt)("p",null,"Pointers can introduce subtle bugs (e.g., nil-dereference) if not used correctly."),(0,l.kt)("h3",{id:"as-receivers"},"As Receivers"),(0,l.kt)("p",null,"Refer: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/golang/go/wiki/CodeReviewComments#receiver-type"},"https://github.com/golang/go/wiki/CodeReviewComments#receiver-type")),(0,l.kt)("h3",{id:"as-arguments"},"As Arguments"),(0,l.kt)("p",null,"Unless required for mutation or because of the embedded sync primitives, it is better to avoid pointers in function arguments."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("em",{parentName:"p"},"Note on performance:")," Go compiler is smart enough to use stack-allocation for arguments when value types are used which is almost always more performant than pointers. ",(0,l.kt)("a",{parentName:"p",href:"https://medium.com/@vCabbage/go-are-pointers-a-performance-optimization-a95840d3ef85"},"Reference"))),(0,l.kt)("h2",{id:"references"},"References"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://talks.golang.org/2014/names.slide"},"Naming things in Go"))))}m.isMDXComponent=!0}}]);